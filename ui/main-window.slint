import { Palette, Button, ComboBox, ScrollView, VerticalBox, ProgressIndicator } from "std-widgets.slint";

export enum MessageType { info, error }

export struct Message {
  text: string,
  mtype: MessageType
}

export struct DirectoryInfo {
  path: string,
}

export struct FileInfo {
  path: string,
  name: string,

  progress: float,
}

export enum RotationValue { no-rotation, deg-90, deg-180, deg-270 }

/// Custom button that differs from standard button by possibility to configure
component CButton inherits Rectangle {
  in-out property<bool> enabled <=> touch-area.enabled;
  out property<bool> has-hover <=> touch-area.has-hover;

  in-out property<string> text <=> text-field.text;

  in-out property<color> background-on-press: gray.brighter(0.5);
  in-out property<color> background-on-hover: gray.brighter(0.8);

  background: touch-area.pressed ? background-on-press :
              touch-area.has-hover ? background-on-hover : white;

  animate background {
    duration: 50ms;
  }

  callback clicked <=> touch-area.clicked;

  text-field := Text {
    color: black;
  }
  touch-area := TouchArea {}
}

component AttachedVideo inherits Rectangle {
  in-out property<bool> is-transcoding: false;
  callback on-close <=> close-button.clicked;

  in property<FileInfo> info: {
    path: "",
    name: @tr("Unknown"),
    progress: 0.0,
  };

  VerticalBox {
    alignment: start;

    Image {
      source: @image-url("res/video-icon.png");
      image-fit: contain;
    }

    Text {
      height: 60px;

      text: info.name;
      wrap: word-wrap;
      font_size: 16pt;
      overflow: elide;
      horizontal-alignment: center;
    }

    if is-transcoding: ProgressIndicator {
      progress: info.progress;
    }
  }

  touch-area := TouchArea {
    enabled: !is-transcoding;
  }

  close-button := CButton {
    enabled: !is-transcoding;
    visible: touch-area.has-hover || self.has-hover;
    text: "✕";
    width: 30px;
    height: 30px;
    x: parent.width - self.width - 4px;
    y: 4px;

    border-radius: 20px;
  }
}

component ImageButton inherits Rectangle {
  in-out property<bool> enabled: true;

  callback clicked <=> area.clicked;

  in-out property<image> image <=> image.source;
  in-out property<ImageFit> image-fit <=> image.image-fit;

  border-radius: 5px;
  background: area.pressed ? gray.brighter(0.7) : transparent;

  animate background {
    duration: 50ms;
  }

  image := Image {
    width: parent.width;
    height: parent.height;
  }

  area := TouchArea {
    enabled <=> root.enabled;
    mouse-cursor: pointer;
  }
}

component DirectorySelector inherits Rectangle {
  in-out property<bool> enabled: true;
  in-out property<DirectoryInfo> selected-directory: {
    path: @tr("Select output folder")
  };

  callback pick-directory <=> button.clicked;

  HorizontalLayout {
    alignment: space-between;
    spacing: 10px;
    padding: 5px;
    padding-left: 15px;

    Text {
      text: selected-directory.path;

      font_size: 16pt;
      overflow: elide;
      vertical-alignment: center;
    }

    button := ImageButton {
      width: 45px;
      height: 45px;

      image: @image-url("res/open-dir.png");
      image-fit: contain;

      enabled <=> root.enabled;
    }
  }
}

component ControlPane inherits Rectangle {
  in-out property<bool> enabled: true;

  in-out property<DirectoryInfo> output-directory <=> path-selector.selected-directory;
  in-out property<length> inner-padding: 0px;
  in-out property<RotationValue> rotation-value: no-rotation;

  property<[string]> rotation-value-model: [@tr("No rotation"), @tr("90° Clockwise"), @tr("180° Clockwise"), @tr("270° Clockwise")];

  callback pick-directory <=> path-selector.pick-directory;
  callback rotate-videos <=> button.clicked;

  function get-rotation-value(rotation-string: string) -> RotationValue {
    return rotation-string == rotation-value-model[0] ? no-rotation
         : rotation-string == rotation-value-model[1] ? deg-90
         : rotation-string == rotation-value-model[2] ? deg-180
         : rotation-string == rotation-value-model[3] ? deg-270 : no-rotation;
  }

  HorizontalLayout {
    alignment: space-around;
    padding <=> root.inner-padding;

    VerticalLayout {
      alignment: start;
      spacing: 15px;

      width: 500px;

      path-selector := DirectorySelector {
        enabled <=> root.enabled;
        background: Palette.alternate-background;
        border-radius: 8px;
      }

      combo := ComboBox {
        enabled <=> root.enabled;

        height: 55px;

        model: rotation-value-model;
        current-value: rotation-value-model[0];

        selected(value) => {
          rotation-value = get-rotation-value(value);
        }
      }
    }

    button := Button {
      enabled <=> root.enabled;

      width: 215px;
      height: 50px;

      text: @tr("Rotate videos");
    }
  }
}

component MessageBox inherits Text {
  in-out property<Message> message;

  text: message.text;
  color: message.mtype == MessageType.error ? red : blue;

  font-size: 16pt;
  horizontal-alignment: center;
}

export component MainWindow inherits Window {
  title: "Video Rotator";
  default-font-size: 16pt;

  min-width: 1280px;
  min-height: 720px;

  preferred-width: 1280px;
  preferred-height: 720px;

  background: Palette.background;

  in-out property<bool> is-transcoding: false;

  in-out property<[FileInfo]> file_infos: [];
  in-out property<DirectoryInfo> output-directory <=> control.output-directory;
  in-out property<RotationValue> rotation-value <=> control.rotation-value;

  in-out property<Message> message: {
    text: "",
    mtype: MessageType.info,
  };

  callback pick-files;
  callback pick-directory <=> control.pick-directory;
  callback rotate-videos <=> control.rotate-videos;
  callback remove-video(int);

  VerticalLayout {
    padding: 70px;
    spacing: 40px;
    alignment: center;

    ScrollView {
      height: 215px;

      HorizontalLayout {
        spacing: 15px;
        alignment: center;

        for file_info[index] in file_infos: AttachedVideo {
          is-transcoding <=> root.is-transcoding;

          info: file_info;

          width: 150px;
          height: 200px;

          on-close => {
            remove-video(index);
          }
        }

        ImageButton {
          enabled: !is-transcoding;

          width: 115px;
          height: 140px;

          image: @image-url("res/new-file.png");
          image-fit: contain;

          clicked => {
            pick-files()
          }
        }
      }
    }

    HorizontalLayout {
      alignment: center;

      control := ControlPane {
        enabled: !is-transcoding;

        width: 800px;
        height: 170px;

        inner-padding: 20px;

        background: Palette.control-background;
        border-radius: 15px;
      }
    }

    MessageBox {
      message <=> root.message;
    }
  }
}
